@page "/rent/{id}"
@rendermode RenderMode.InteractiveServer
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
@inject UserAccessor UserAccessor
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using RentAGym.Application.TenantUseCases
@using RentAGym.UI.rc2.Components.Common
@using Blazorise.Components

<JSScript JSFile="./Components/Pages/RentHallPage.razor.js" />
    <div class="form-container">
        <form id="search-form">
            <DatePicker TValue="DateTime?" @bind-Dates="selectedDates"
                        InputMode="DateInputMode.Date"
                        SelectionMode="DateInputSelectionMode.Range"
                        InputFormat="dd.MM.yyyy"
                        DisplayFormat="dd.MM.yyyy"
                        Min="DateTime.Now.AddDays(0)"
                        Max="DateTime.Today.AddMonths(2).AddDays(-5)"
                        StaticPicker="false"
                        DisabledDates="@dateTimeEnumerable" 
                        @bind-Dates:after="LoadTimes"
                        Class="date-picker-component"/>
            <div class="before-time-caption">
                <p class ="time-caption">Время от</p>
                <p class="time-caption">Время до</p>
            </div>
            <div class="schedule-time">
                <div class="time-from-block">
                    <InputRadioGroup @bind-Value="selectedTimeFrom">
                        @foreach (var time in availableTimesFrom)
                        {
                            <InputRadio class="input-radio-time" Value="@time" data-time="@time" />
                        }
                    </InputRadioGroup>
                </div>
                <div class="time-to-block">
                    <InputRadioGroup @bind-Value="selectedTimeTo">
                        @foreach (var time in availableTimesTo)
                        {
                            <InputRadio class="input-radio-time" Value="@time" data-time="@time" />
                        }
                    </InputRadioGroup>
                </div>
            </div>
            <div class="btns">
                <button @onclick="SendRentAsync" type="submit">Отправить</button>
                <button type="reset">Сброс</button>
            </div>
            <div class="week-block">
                <input type="checkbox" id="scales" name="scales" @bind="weekRent" />
                <label for="scales">Еженедельная подписка</label>
                <div class="custom-tooltip">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 18 18">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                        <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286m1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94" />
                    </svg>
                </div>
            </div>
        </form>
    </div>



@code {
    [Parameter] public string id { get; set; }
    IReadOnlyList<DateTime?> selectedDates;
    IEnumerable<DateTime?> dateTimeEnumerable;
    TimeOnly? selectedTimeFrom;
    TimeOnly? selectedTimeTo;
    List<TimeOnly> availableTimesFrom = new();
    List<TimeOnly> availableTimesTo = new();
    List<TimeSpan> customTimes = new List<TimeSpan>();
    private bool weekRent = false;

    protected override async Task OnInitializedAsync()
    {
        var days = (await Mediator.Send(new GetMonthScheduleRequest(int.Parse(id), DateOnly.FromDateTime(DateTime.Today)))).ToList()
            .Where(prop => prop.Day >= DateTime.Now.Day);
        days=days.Concat(await Mediator.Send(new GetMonthScheduleRequest(int.Parse(id), DateOnly.FromDateTime(DateTime.Today.AddMonths(1))))).ToList()
        .Where(prop => prop.Day >= DateTime.Now.Day);
        dateTimeEnumerable = days.Select(dateOnly => (DateTime?)dateOnly.ToDateTime(TimeOnly.MinValue));
    }

    private async Task SendRentAsync()
    {
        DateTime firstDate = selectedDates.First()!.Value;
        DateTime lastDate = selectedDates.Last()!.Value;

        var user = await UserAccessor.GetRequiredUserAsync();
        var resp = await Mediator.Send(new RegisterRentRequest(user.Id, int.Parse(id), weekRent,
            new DateTime(firstDate.Year, firstDate.Month, firstDate.Day, selectedTimeFrom!.Value.Hour, 0, 0),
            new DateTime(lastDate.Year, lastDate.Month, lastDate.Day, selectedTimeTo!.Value.Hour, 0, 0)));
        
        if (resp == false)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Что-то пошло не так... \nПопробуйте выбрать день/время ещё раз");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Успешно!");
            NavigationManager.NavigateTo("/Tenant/profile/rented_halls");
        }
    }

    public async Task LoadTimes()
    {
        if (selectedDates?.Any() == true)
        {
            availableTimesFrom.Clear();
            availableTimesTo.Clear();

            var timeFrom = (await Mediator.Send(new GetDayScheduleRequest(int.Parse(id), DateOnly.FromDateTime(selectedDates.First()!.Value)))).ToList();
            var timeTo = (await Mediator.Send(new GetDayScheduleRequest(int.Parse(id), DateOnly.FromDateTime(selectedDates.Last()!.Value)))).ToList();

            for (int i = 0; i < 24; i++)
            {
                if (timeFrom.FirstOrDefault(x => x.Hour == i) == TimeOnly.MinValue)
                {
                    availableTimesFrom.Add(new TimeOnly(hour: i, minute: 0));
                }
                if (timeTo.FirstOrDefault(x => x.Hour == i) == TimeOnly.MinValue)
                {
                    availableTimesTo.Add(new TimeOnly(hour: i, minute: 0));
                }
            }
            availableTimesFrom.Remove(availableTimesFrom.Find(x => x.Hour == 0));
            availableTimesTo.Remove(availableTimesTo.Find(x => x.Hour == 0));
        }
    }
}